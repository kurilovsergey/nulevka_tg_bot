const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const moment = require('moment');
require('dotenv').config();

// –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
const token = process.env.token;
const adminId = process.env.adminId;
const assistantId = process.env.assistantId

//const token = '8010639257:AAHagoqQeBtTuT-o9SnHr9G1uka1-bX8FnE'; // –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
//const adminId = 135224612; // ID –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
//const assistantId = 5209894548; // ID –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è –∞–¥–º–∏–Ω–∞
const bot = new TelegramBot(token, { polling: true });

const betsFile = 'bets.json';
const matchesFile = 'matches.json';
const currentRoundFile = 'currentRound.json'; // –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç—É—Ä–∞
const matchDateFile = 'matchDate.json'; // –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–≤–æ–≥–æ –º–∞—Ç—á–∞

let bets = {};
let matches = {};
let currentRound = null;
let matchDate = null; // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –º–∞—Ç—á–∞

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤
function loadData() {
    if (fs.existsSync(betsFile)) {
        bets = JSON.parse(fs.readFileSync(betsFile, 'utf8'));
    }
    if (fs.existsSync(matchesFile)) {
        matches = JSON.parse(fs.readFileSync(matchesFile, 'utf8'));
    }
    if (fs.existsSync(currentRoundFile)) {
        const data = JSON.parse(fs.readFileSync(currentRoundFile, 'utf8'));
        currentRound = data.round;
    }
    if (fs.existsSync(matchDateFile)) {
        const data = JSON.parse(fs.readFileSync(matchDateFile, 'utf8'));
        matchDate = moment(data.date); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–æ–∫ –≤ —Ñ–∞–π–ª
function saveBets() {
    fs.writeFileSync(betsFile, JSON.stringify(bets, null, 2));
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—É—Ä–∞ –≤ —Ñ–∞–π–ª
function saveCurrentRound() {
    fs.writeFileSync(currentRoundFile, JSON.stringify({ round: currentRound }, null, 2));
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –º–∞—Ç—á–∞ –≤ —Ñ–∞–π–ª
function saveMatchDate() {
    fs.writeFileSync(matchDateFile, JSON.stringify({ date: matchDate.format() }, null, 2));
}

loadData();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
function createMainMenu(chatId) {
    let menu = {
        reply_markup: {
            keyboard: [
                ['–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç—á–∏', '–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É'],
                ['–ú–æ–π –ø—Ä–æ–≥–Ω–æ–∑', '–£–¥–∞–ª–∏—Ç—å –º–æ–π –ø—Ä–æ–≥–Ω–æ–∑', '–ü—Ä–∞–≤–∏–ª–∞']
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    };

    // –î–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (chatId === adminId) {
        menu.reply_markup.keyboard.push(['–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—É—Ä', '–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞–≤–æ–∫', '–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞–≤–∫–∏']);
    }

    // –î–ª—è –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è –∞–¥–º–∏–Ω–∞
    if (chatId === assistantId) {
        menu.reply_markup.keyboard.push(['–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—É—Ä']);
    }

    return menu;
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –Ω—É–ª–µ–≤—â–∏–∫! üç∫‚öΩ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', createMainMenu(chatId));
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    const username = msg.from.username; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–º–µ—Å—Ç–æ ID

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—á–∞–ª—Å—è –ª–∏ —Ç—É—Ä
    const isTourStarted = matchDate && moment().isAfter(matchDate);

    if (text === '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç—á–∏') {
        if (!currentRound || !matches[currentRound]) {
            bot.sendMessage(chatId, "–ú–∞—Ç—á–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ç—É—Ä–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.");
        } else {
            bot.sendMessage(chatId, `–ú–∞—Ç—á–∏ —Ç—É—Ä–∞ ${currentRound}:\n${matches[currentRound].join('\n')}`);
        }
    } else if (text === '–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É') {
        if (isTourStarted) {
            bot.sendMessage(chatId, "–¢—É—Ä –Ω–∞—á–∞–ª—Å—è, —Å—Ç–∞–≤–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –≤–æ–∑–º–æ–∂–Ω—ã.");
        } else if (!currentRound || !matches[currentRound]) {
            bot.sendMessage(chatId, "–ú–∞—Ç—á–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ç—É—Ä–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.");
        } else {
            if (bets[username]) {
                bot.sendMessage(chatId, '–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É. –ë–æ–ª—å—à–µ —Å—Ç–∞–≤–æ–∫ –Ω–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å.');
            } else {
                bot.sendMessage(chatId, '–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –Ω–∞ –ø–µ—Ä–≤—ã–π –º–∞—Ç—á:');
                askForBet(chatId, username);
            }
        }
    } else if (text === '–£–¥–∞–ª–∏—Ç—å –º–æ–π –ø—Ä–æ–≥–Ω–æ–∑') {
        if (isTourStarted) {
            bot.sendMessage(chatId, "–¢—É—Ä –Ω–∞—á–∞–ª—Å—è, –¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã.");
        } else if (bets[username]) {
            delete bets[username];
            saveBets();
            bot.sendMessage(chatId, "–í–∞—à–∏ —Å—Ç–∞–≤–∫–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.");
        } else {
            bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
        }
    } else if (text === '–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞–≤–æ–∫' && (chatId === adminId || chatId === assistantId)) {
        let allBets = Object.keys(bets).map(user => {
            let betInfo = bets[user];
            let totalGoals = betInfo.bets.reduce((total, bet) => {
                let score = bet.bet.split(/[-:]/).map(num => parseInt(num));
                return total + score[0] + score[1];
            }, 0);

            let betDetails = betInfo.bets.map(bet => `${bet.match}: ${bet.bet}`).join('\n');
            return `–ò–≥—Ä–æ–∫: @${betInfo.username}\n–°—Ç–∞–≤–∫–∏:\n${betDetails}\n–¢–û–¢–ê–õ: ${totalGoals}`;
        }).join('\n\n');

        if (allBets === '') {
            bot.sendMessage(chatId, "–°—Ç–∞–≤–∫–∏ –µ—â—ë –Ω–µ —Å–¥–µ–ª–∞–Ω—ã.");
        } else {
            bot.sendMessage(chatId, `–°—Ç–∞–≤–∫–∏ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤:\n\n${allBets}`);
        }
    } else if (text === '–ú–æ–π –ø—Ä–æ–≥–Ω–æ–∑') {
        if (!bets[username]) {
            bot.sendMessage(chatId, "–í—ã –Ω–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É.");
        } else {
            let userBetInfo = bets[username];
            let totalGoals = userBetInfo.bets.reduce((total, bet) => {
                let score = bet.bet.split(/[-:]/).map(num => parseInt(num));
                return total + score[0] + score[1];
            }, 0);

            let betDetails = userBetInfo.bets.map(bet => `${bet.match}: ${bet.bet}`).join('\n');
            bot.sendMessage(chatId, `–í–∞—à–∏ —Å—Ç–∞–≤–∫–∏:\n\n${betDetails}\n–¢–û–¢–ê–õ: ${totalGoals}`);
        }
    } else if (text === '–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞–≤–∫–∏' && chatId === adminId) {
        bets = {};
        saveBets();
        bot.sendMessage(chatId, "–í—Å–µ —Å—Ç–∞–≤–∫–∏ –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã.");
    } else if (text === '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—É—Ä' && (chatId === adminId || chatId === assistantId)) {
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ç—É—Ä–∞:');
        bot.once('message', (msg) => {
            let round = msg.text.trim();
            if (isNaN(round) || !matches[round]) {
                bot.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—É—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            } else {
                currentRound = round;
                saveCurrentRound();
                bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –º–∞—Ç—á–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: DD.MM.YYYY HH:mm (–Ω–∞–ø—Ä–∏–º–µ—Ä, 02.03.2024 20:00)');
                bot.once('message', (msg) => {
                    let matchTime = msg.text.trim();
                    let validDate = moment(matchTime, 'DD.MM.YYYY HH:mm', true);

                    if (!validDate.isValid()) {
                        bot.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                    } else {
                        matchDate = validDate;
                        saveMatchDate();
                        bot.sendMessage(chatId, `–¢—É—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ç—É—Ä ${currentRound}, –ø–µ—Ä–≤—ã–π –º–∞—Ç—á –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å—Å—è ${matchDate.format('DD.MM.YYYY HH:mm')}.`);
                    }
                });
            }
        });
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –¢–æ—Ç–∞–ª–∞
function calculateTotal(betsList) {
    let total = 0;
    for (let bet of betsList) {
        let scores = bet.bet.split(/[-:]/).map(num => parseInt(num));
        total += scores.reduce((sum, num) => sum + num, 0);
    }
    return total;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞–≤–∫–∏ –Ω–∞ –º–∞—Ç—á
function askForBet(chatId, username) {
    let userBets = [];
    let matchesForRound = matches[currentRound];

    function ask(index) {
        if (index >= matchesForRound.length) {
            bets[username] = { username: username, bets: userBets };
            saveBets();
            bot.sendMessage(chatId, "–í–∞—à–∏ —Å—Ç–∞–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –£–¥–∞—á–∏!");
            return;
        }

        let match = matchesForRound[index];
        bot.sendMessage(chatId, `–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –Ω–∞ –º–∞—Ç—á: ${match}`);

        bot.once('message', (msg) => {
            let bet = msg.text.trim();
            if (!/^\d{1,2}[-]\d{1,2}$/.test(bet)) {
                bot.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
                ask(index);
                return;
            }
            userBets.push({ match, bet });
            ask(index + 1);
        });
    }
    ask(0);
}

console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω",token);
